Commands
----------
go->wave->dive->go->read


Analysis
---------
After some trials of plaintexts, we observed that ciphertexts only have characters between 'f' and 'u', so we concluded that game is following the encoding format of Level 4 only, where every block contains pair of two characters. Since elements are of the field $$F_{128}$$, each block value is between 0 and 127, i.e. between "ff" and "mu". As
ff = (0,0) = 0*16 + 0 = 0   
mu = (7,15) = 7*16 + 15 = 127

Linear Transformations always satisfies some underlying property which makes them easily reversible.
Since only linear transformations are performed on the plaintext, we performed hit and trials with many plaintexts to find the underlying property that the linear transformation algorithm satisfies. After many trials, we observed that cipher value of the $$i^{th}$$ block depends on the j blocks of the plaintext where $$j<=i$$. That is, block 1 of the ciphertext is obtained by mixing the bytes of block 1 of the plaintext, block 2 of the ciphertext is obtained by mixing the bytes of blocks 1 and 2 of the plaintext, and so on for other blocks. This point is proved by the following pairs of plaintexts and ciphertexts:-

Plaintext                  ->      Ciphertext
ff ff ff ff ff ff ff fg       ->      ff ff ff ff ff ff ff gu
ff ff ff ff ff ff fg ff       ->      ff ff ff ff ff ff kj jq
ff ff ff ff ff fg ff ff       ->      ff ff ff ff ff mh ll il
ff ff ff ff fg ff ff ff       ->      ff ff ff ff lu is ft gr

Such kind of poor mixing traits are the results of lower triangular matrix transformations and hence our matrix A is a lower triangular matrix.

Technique used to break the cipher
------------------------------------
Password to decrypt - "gskohgkokritmqjfikfhffgiltjlisfr"

To break this encryption we applied the chosen-plaintext attack. We obtained the value of one block of the plaintext at a time. Since ciphertext of block 1 depends on block 1 of the plaintext, we just brute force all 128 possible combinations (ff to mu) for block 1 of the plaintext and kept the value of the rest of blocks of plaintext to ff, i.e. -
                             **ffffffffffffffffffffffffffffff       (* stands for the permuted value)

Then we obtained the ciphertexts corresponding to these 128 plaintexts. We then found block 1 of the plaintext by comparing block 1 of the 128 obtained ciphers with the original ciphertext ("gs"). The plaintext which results in the output of "gs" is the result, which was "mi". 

Once we obtained the block 1 plaintext we repeat the above process to obtain the block 2 plaintext. Here we fixed block 1 to the obtained value "mi" and obtained all 128 possibilities for block 2, i.e. - mi**ffffffffffffffffffffffffffff and then finalized the value of block 2 of plaintext by comparing it with the block 2 value of the given ciphertext (i.e. "ko").

We repeated the above process for all the 16 blocks of the ciphertext to obtain the following plaintext.
Plaintext after decryption - mimkmhmlmnmflumhlilgifififififif

On submitting this result on the game, we got the ciphertext - "gskohgkokritmqjfikfhffgiltjlisfr". This is the encrypted password given by the game (on entering the term "password"), hence our decryption was successful. But since the game didn't open the gate of the cave, we suspect that this obtained plaintext is also a code which is needed to be decoded.

Decoding of the Plaintext
----------------------------
Since last 6 blocks of the plaintext have the same value - "if", it seems that these are padding zeroes like in the password of level 4. So we tried various techniques to translate the value "if" to 0 and we found the following method of ASCII which was also used in level 4.

if = (3,0) =  (0011,0000) = $$(0011000)_{2}$$ = 0
Similarily,
mi = (7,3) = (0111,0011) = $$(01110011)_{2}$$ = s
mk â‰¡ (7,5) = (0111,0101) = $$(01110101)_{2}$$ = u

So the code after decoding - survxporca000000


Password
----------
survxporca


